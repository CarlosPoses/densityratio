// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// distance
arma::mat distance(arma::mat X, arma::mat Y, bool symmetric);
RcppExport SEXP _densityratio_distance(SEXP XSEXP, SEXP YSEXP, SEXP symmetricSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< bool >::type symmetric(symmetricSEXP);
    rcpp_result_gen = Rcpp::wrap(distance(X, Y, symmetric));
    return rcpp_result_gen;
END_RCPP
}
// householder_QR
List householder_QR(arma::mat X);
RcppExport SEXP _densityratio_householder_QR(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(householder_QR(X));
    return rcpp_result_gen;
END_RCPP
}
// compute_alpha
arma::vec compute_alpha(arma::mat Hhat, const arma::vec& hhat, const double lambda);
RcppExport SEXP _densityratio_compute_alpha(SEXP HhatSEXP, SEXP hhatSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Hhat(HhatSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type hhat(hhatSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_alpha(Hhat, hhat, lambda));
    return rcpp_result_gen;
END_RCPP
}
// set_threads
int set_threads(int nthreads);
RcppExport SEXP _densityratio_set_threads(SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(set_threads(nthreads));
    return rcpp_result_gen;
END_RCPP
}
// make_Hhat
arma::mat make_Hhat(arma::mat dist_de, double sigma);
RcppExport SEXP _densityratio_make_Hhat(SEXP dist_deSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type dist_de(dist_deSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(make_Hhat(dist_de, sigma));
    return rcpp_result_gen;
END_RCPP
}
// make_hhat
arma::mat make_hhat(arma::mat dist_nu, double sigma);
RcppExport SEXP _densityratio_make_hhat(SEXP dist_nuSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type dist_nu(dist_nuSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(make_hhat(dist_nu, sigma));
    return rcpp_result_gen;
END_RCPP
}
// compute_ulsif
List compute_ulsif(arma::mat dist_nu, arma::mat dist_de, arma::vec sigma, arma::vec lambda, bool parallel, int nthreads);
RcppExport SEXP _densityratio_compute_ulsif(SEXP dist_nuSEXP, SEXP dist_deSEXP, SEXP sigmaSEXP, SEXP lambdaSEXP, SEXP parallelSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type dist_nu(dist_nuSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type dist_de(dist_deSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_ulsif(dist_nu, dist_de, sigma, lambda, parallel, nthreads));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_densityratio_distance", (DL_FUNC) &_densityratio_distance, 3},
    {"_densityratio_householder_QR", (DL_FUNC) &_densityratio_householder_QR, 1},
    {"_densityratio_compute_alpha", (DL_FUNC) &_densityratio_compute_alpha, 3},
    {"_densityratio_set_threads", (DL_FUNC) &_densityratio_set_threads, 1},
    {"_densityratio_make_Hhat", (DL_FUNC) &_densityratio_make_Hhat, 2},
    {"_densityratio_make_hhat", (DL_FUNC) &_densityratio_make_hhat, 2},
    {"_densityratio_compute_ulsif", (DL_FUNC) &_densityratio_compute_ulsif, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_densityratio(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
